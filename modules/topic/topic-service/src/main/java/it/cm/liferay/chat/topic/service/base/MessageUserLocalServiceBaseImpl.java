/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.cm.liferay.chat.topic.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import it.cm.liferay.chat.topic.model.MessageUser;
import it.cm.liferay.chat.topic.service.MessageUserLocalService;
import it.cm.liferay.chat.topic.service.persistence.MessagePersistence;
import it.cm.liferay.chat.topic.service.persistence.MessageUserPK;
import it.cm.liferay.chat.topic.service.persistence.MessageUserPersistence;
import it.cm.liferay.chat.topic.service.persistence.TopicPersistence;
import it.cm.liferay.chat.topic.service.persistence.TopicUserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the message user local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.cm.liferay.chat.topic.service.impl.MessageUserLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see it.cm.liferay.chat.topic.service.impl.MessageUserLocalServiceImpl
 * @see it.cm.liferay.chat.topic.service.MessageUserLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class MessageUserLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements MessageUserLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link it.cm.liferay.chat.topic.service.MessageUserLocalServiceUtil} to access the message user local service.
	 */

	/**
	 * Adds the message user to the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageUser the message user
	 * @return the message user that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MessageUser addMessageUser(MessageUser messageUser) {
		messageUser.setNew(true);

		return messageUserPersistence.update(messageUser);
	}

	/**
	 * Creates a new message user with the primary key. Does not add the message user to the database.
	 *
	 * @param messageUserPK the primary key for the new message user
	 * @return the new message user
	 */
	@Override
	@Transactional(enabled = false)
	public MessageUser createMessageUser(MessageUserPK messageUserPK) {
		return messageUserPersistence.create(messageUserPK);
	}

	/**
	 * Deletes the message user with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageUserPK the primary key of the message user
	 * @return the message user that was removed
	 * @throws PortalException if a message user with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MessageUser deleteMessageUser(MessageUserPK messageUserPK)
		throws PortalException {
		return messageUserPersistence.remove(messageUserPK);
	}

	/**
	 * Deletes the message user from the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageUser the message user
	 * @return the message user that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public MessageUser deleteMessageUser(MessageUser messageUser) {
		return messageUserPersistence.remove(messageUser);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(MessageUser.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return messageUserPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.cm.liferay.chat.topic.model.impl.MessageUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return messageUserPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.cm.liferay.chat.topic.model.impl.MessageUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return messageUserPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return messageUserPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return messageUserPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public MessageUser fetchMessageUser(MessageUserPK messageUserPK) {
		return messageUserPersistence.fetchByPrimaryKey(messageUserPK);
	}

	/**
	 * Returns the message user with the primary key.
	 *
	 * @param messageUserPK the primary key of the message user
	 * @return the message user
	 * @throws PortalException if a message user with the primary key could not be found
	 */
	@Override
	public MessageUser getMessageUser(MessageUserPK messageUserPK)
		throws PortalException {
		return messageUserPersistence.findByPrimaryKey(messageUserPK);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(messageUserLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(MessageUser.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.messageId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(messageUserLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(MessageUser.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"primaryKey.messageId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(messageUserLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(MessageUser.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("primaryKey.messageId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return messageUserLocalService.deleteMessageUser((MessageUser)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return messageUserPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the message users.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.cm.liferay.chat.topic.model.impl.MessageUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of message users
	 * @param end the upper bound of the range of message users (not inclusive)
	 * @return the range of message users
	 */
	@Override
	public List<MessageUser> getMessageUsers(int start, int end) {
		return messageUserPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of message users.
	 *
	 * @return the number of message users
	 */
	@Override
	public int getMessageUsersCount() {
		return messageUserPersistence.countAll();
	}

	/**
	 * Updates the message user in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param messageUser the message user
	 * @return the message user that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public MessageUser updateMessageUser(MessageUser messageUser) {
		return messageUserPersistence.update(messageUser);
	}

	/**
	 * Returns the message local service.
	 *
	 * @return the message local service
	 */
	public it.cm.liferay.chat.topic.service.MessageLocalService getMessageLocalService() {
		return messageLocalService;
	}

	/**
	 * Sets the message local service.
	 *
	 * @param messageLocalService the message local service
	 */
	public void setMessageLocalService(
		it.cm.liferay.chat.topic.service.MessageLocalService messageLocalService) {
		this.messageLocalService = messageLocalService;
	}

	/**
	 * Returns the message persistence.
	 *
	 * @return the message persistence
	 */
	public MessagePersistence getMessagePersistence() {
		return messagePersistence;
	}

	/**
	 * Sets the message persistence.
	 *
	 * @param messagePersistence the message persistence
	 */
	public void setMessagePersistence(MessagePersistence messagePersistence) {
		this.messagePersistence = messagePersistence;
	}

	/**
	 * Returns the message user local service.
	 *
	 * @return the message user local service
	 */
	public MessageUserLocalService getMessageUserLocalService() {
		return messageUserLocalService;
	}

	/**
	 * Sets the message user local service.
	 *
	 * @param messageUserLocalService the message user local service
	 */
	public void setMessageUserLocalService(
		MessageUserLocalService messageUserLocalService) {
		this.messageUserLocalService = messageUserLocalService;
	}

	/**
	 * Returns the message user persistence.
	 *
	 * @return the message user persistence
	 */
	public MessageUserPersistence getMessageUserPersistence() {
		return messageUserPersistence;
	}

	/**
	 * Sets the message user persistence.
	 *
	 * @param messageUserPersistence the message user persistence
	 */
	public void setMessageUserPersistence(
		MessageUserPersistence messageUserPersistence) {
		this.messageUserPersistence = messageUserPersistence;
	}

	/**
	 * Returns the topic local service.
	 *
	 * @return the topic local service
	 */
	public it.cm.liferay.chat.topic.service.TopicLocalService getTopicLocalService() {
		return topicLocalService;
	}

	/**
	 * Sets the topic local service.
	 *
	 * @param topicLocalService the topic local service
	 */
	public void setTopicLocalService(
		it.cm.liferay.chat.topic.service.TopicLocalService topicLocalService) {
		this.topicLocalService = topicLocalService;
	}

	/**
	 * Returns the topic persistence.
	 *
	 * @return the topic persistence
	 */
	public TopicPersistence getTopicPersistence() {
		return topicPersistence;
	}

	/**
	 * Sets the topic persistence.
	 *
	 * @param topicPersistence the topic persistence
	 */
	public void setTopicPersistence(TopicPersistence topicPersistence) {
		this.topicPersistence = topicPersistence;
	}

	/**
	 * Returns the topic user local service.
	 *
	 * @return the topic user local service
	 */
	public it.cm.liferay.chat.topic.service.TopicUserLocalService getTopicUserLocalService() {
		return topicUserLocalService;
	}

	/**
	 * Sets the topic user local service.
	 *
	 * @param topicUserLocalService the topic user local service
	 */
	public void setTopicUserLocalService(
		it.cm.liferay.chat.topic.service.TopicUserLocalService topicUserLocalService) {
		this.topicUserLocalService = topicUserLocalService;
	}

	/**
	 * Returns the topic user persistence.
	 *
	 * @return the topic user persistence
	 */
	public TopicUserPersistence getTopicUserPersistence() {
		return topicUserPersistence;
	}

	/**
	 * Sets the topic user persistence.
	 *
	 * @param topicUserPersistence the topic user persistence
	 */
	public void setTopicUserPersistence(
		TopicUserPersistence topicUserPersistence) {
		this.topicUserPersistence = topicUserPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("it.cm.liferay.chat.topic.model.MessageUser",
			messageUserLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"it.cm.liferay.chat.topic.model.MessageUser");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return MessageUserLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return MessageUser.class;
	}

	protected String getModelClassName() {
		return MessageUser.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = messageUserPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = it.cm.liferay.chat.topic.service.MessageLocalService.class)
	protected it.cm.liferay.chat.topic.service.MessageLocalService messageLocalService;
	@BeanReference(type = MessagePersistence.class)
	protected MessagePersistence messagePersistence;
	@BeanReference(type = MessageUserLocalService.class)
	protected MessageUserLocalService messageUserLocalService;
	@BeanReference(type = MessageUserPersistence.class)
	protected MessageUserPersistence messageUserPersistence;
	@BeanReference(type = it.cm.liferay.chat.topic.service.TopicLocalService.class)
	protected it.cm.liferay.chat.topic.service.TopicLocalService topicLocalService;
	@BeanReference(type = TopicPersistence.class)
	protected TopicPersistence topicPersistence;
	@BeanReference(type = it.cm.liferay.chat.topic.service.TopicUserLocalService.class)
	protected it.cm.liferay.chat.topic.service.TopicUserLocalService topicUserLocalService;
	@BeanReference(type = TopicUserPersistence.class)
	protected TopicUserPersistence topicUserPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}