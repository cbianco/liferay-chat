/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.cm.liferay.chat.topic.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import it.cm.liferay.chat.topic.model.MessageUser;
import it.cm.liferay.chat.topic.model.MessageUserModel;
import it.cm.liferay.chat.topic.model.MessageUserSoap;
import it.cm.liferay.chat.topic.service.persistence.MessageUserPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MessageUser service. Represents a row in the &quot;Conversation_MessageUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link MessageUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessageUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessageUserImpl
 * @see MessageUser
 * @see MessageUserModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class MessageUserModelImpl extends BaseModelImpl<MessageUser>
	implements MessageUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a message user model instance should use the {@link MessageUser} interface instead.
	 */
	public static final String TABLE_NAME = "Conversation_MessageUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "messageId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "topicId", Types.BIGINT },
			{ "read_", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("messageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("topicId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("read_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Conversation_MessageUser (messageId LONG not null,userId LONG not null,topicId LONG,read_ BOOLEAN,primary key (messageId, userId))";
	public static final String TABLE_SQL_DROP = "drop table Conversation_MessageUser";
	public static final String ORDER_BY_JPQL = " ORDER BY messageUser.id.messageId ASC, messageUser.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Conversation_MessageUser.messageId ASC, Conversation_MessageUser.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(it.cm.liferay.chat.topic.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.it.cm.liferay.chat.topic.model.MessageUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(it.cm.liferay.chat.topic.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.it.cm.liferay.chat.topic.model.MessageUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(it.cm.liferay.chat.topic.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.cm.liferay.chat.topic.model.MessageUser"),
			true);
	public static final long READ_COLUMN_BITMASK = 1L;
	public static final long TOPICID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long MESSAGEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MessageUser toModel(MessageUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MessageUser model = new MessageUserImpl();

		model.setMessageId(soapModel.getMessageId());
		model.setUserId(soapModel.getUserId());
		model.setTopicId(soapModel.getTopicId());
		model.setRead(soapModel.isRead());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MessageUser> toModels(MessageUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MessageUser> models = new ArrayList<MessageUser>(soapModels.length);

		for (MessageUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(it.cm.liferay.chat.topic.service.util.ServiceProps.get(
				"lock.expiration.time.it.cm.liferay.chat.topic.model.MessageUser"));

	public MessageUserModelImpl() {
	}

	@Override
	public MessageUserPK getPrimaryKey() {
		return new MessageUserPK(_messageId, _userId);
	}

	@Override
	public void setPrimaryKey(MessageUserPK primaryKey) {
		setMessageId(primaryKey.messageId);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new MessageUserPK(_messageId, _userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((MessageUserPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return MessageUser.class;
	}

	@Override
	public String getModelClassName() {
		return MessageUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("messageId", getMessageId());
		attributes.put("userId", getUserId());
		attributes.put("topicId", getTopicId());
		attributes.put("read", isRead());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long messageId = (Long)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long topicId = (Long)attributes.get("topicId");

		if (topicId != null) {
			setTopicId(topicId);
		}

		Boolean read = (Boolean)attributes.get("read");

		if (read != null) {
			setRead(read);
		}
	}

	@JSON
	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		_messageId = messageId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getTopicId() {
		return _topicId;
	}

	@Override
	public void setTopicId(long topicId) {
		_columnBitmask |= TOPICID_COLUMN_BITMASK;

		if (!_setOriginalTopicId) {
			_setOriginalTopicId = true;

			_originalTopicId = _topicId;
		}

		_topicId = topicId;
	}

	public long getOriginalTopicId() {
		return _originalTopicId;
	}

	@JSON
	@Override
	public boolean getRead() {
		return _read;
	}

	@JSON
	@Override
	public boolean isRead() {
		return _read;
	}

	@Override
	public void setRead(boolean read) {
		_columnBitmask |= READ_COLUMN_BITMASK;

		if (!_setOriginalRead) {
			_setOriginalRead = true;

			_originalRead = _read;
		}

		_read = read;
	}

	public boolean getOriginalRead() {
		return _originalRead;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public MessageUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MessageUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MessageUserImpl messageUserImpl = new MessageUserImpl();

		messageUserImpl.setMessageId(getMessageId());
		messageUserImpl.setUserId(getUserId());
		messageUserImpl.setTopicId(getTopicId());
		messageUserImpl.setRead(isRead());

		messageUserImpl.resetOriginalValues();

		return messageUserImpl;
	}

	@Override
	public int compareTo(MessageUser messageUser) {
		MessageUserPK primaryKey = messageUser.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MessageUser)) {
			return false;
		}

		MessageUser messageUser = (MessageUser)obj;

		MessageUserPK primaryKey = messageUser.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MessageUserModelImpl messageUserModelImpl = this;

		messageUserModelImpl._originalUserId = messageUserModelImpl._userId;

		messageUserModelImpl._setOriginalUserId = false;

		messageUserModelImpl._originalTopicId = messageUserModelImpl._topicId;

		messageUserModelImpl._setOriginalTopicId = false;

		messageUserModelImpl._originalRead = messageUserModelImpl._read;

		messageUserModelImpl._setOriginalRead = false;

		messageUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MessageUser> toCacheModel() {
		MessageUserCacheModel messageUserCacheModel = new MessageUserCacheModel();

		messageUserCacheModel.messageUserPK = getPrimaryKey();

		messageUserCacheModel.messageId = getMessageId();

		messageUserCacheModel.userId = getUserId();

		messageUserCacheModel.topicId = getTopicId();

		messageUserCacheModel.read = isRead();

		return messageUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{messageId=");
		sb.append(getMessageId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", topicId=");
		sb.append(getTopicId());
		sb.append(", read=");
		sb.append(isRead());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("it.cm.liferay.chat.topic.model.MessageUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topicId</column-name><column-value><![CDATA[");
		sb.append(getTopicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>read</column-name><column-value><![CDATA[");
		sb.append(isRead());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = MessageUser.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			MessageUser.class, ModelWrapper.class
		};
	private long _messageId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _topicId;
	private long _originalTopicId;
	private boolean _setOriginalTopicId;
	private boolean _read;
	private boolean _originalRead;
	private boolean _setOriginalRead;
	private long _columnBitmask;
	private MessageUser _escapedModel;
}