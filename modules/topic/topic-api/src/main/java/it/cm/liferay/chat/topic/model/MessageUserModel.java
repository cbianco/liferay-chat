/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.cm.liferay.chat.topic.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import it.cm.liferay.chat.topic.service.persistence.MessageUserPK;

import java.io.Serializable;

/**
 * The base model interface for the MessageUser service. Represents a row in the &quot;Conversation_MessageUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link it.cm.liferay.chat.topic.model.impl.MessageUserModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link it.cm.liferay.chat.topic.model.impl.MessageUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MessageUser
 * @see it.cm.liferay.chat.topic.model.impl.MessageUserImpl
 * @see it.cm.liferay.chat.topic.model.impl.MessageUserModelImpl
 * @generated
 */
@ProviderType
public interface MessageUserModel extends BaseModel<MessageUser> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a message user model instance should use the {@link MessageUser} interface instead.
	 */

	/**
	 * Returns the primary key of this message user.
	 *
	 * @return the primary key of this message user
	 */
	public MessageUserPK getPrimaryKey();

	/**
	 * Sets the primary key of this message user.
	 *
	 * @param primaryKey the primary key of this message user
	 */
	public void setPrimaryKey(MessageUserPK primaryKey);

	/**
	 * Returns the message ID of this message user.
	 *
	 * @return the message ID of this message user
	 */
	public long getMessageId();

	/**
	 * Sets the message ID of this message user.
	 *
	 * @param messageId the message ID of this message user
	 */
	public void setMessageId(long messageId);

	/**
	 * Returns the user ID of this message user.
	 *
	 * @return the user ID of this message user
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this message user.
	 *
	 * @param userId the user ID of this message user
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this message user.
	 *
	 * @return the user uuid of this message user
	 */
	public String getUserUuid();

	/**
	 * Sets the user uuid of this message user.
	 *
	 * @param userUuid the user uuid of this message user
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the topic ID of this message user.
	 *
	 * @return the topic ID of this message user
	 */
	public long getTopicId();

	/**
	 * Sets the topic ID of this message user.
	 *
	 * @param topicId the topic ID of this message user
	 */
	public void setTopicId(long topicId);

	/**
	 * Returns the read of this message user.
	 *
	 * @return the read of this message user
	 */
	public boolean getRead();

	/**
	 * Returns <code>true</code> if this message user is read.
	 *
	 * @return <code>true</code> if this message user is read; <code>false</code> otherwise
	 */
	public boolean isRead();

	/**
	 * Sets whether this message user is read.
	 *
	 * @param read the read of this message user
	 */
	public void setRead(boolean read);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(MessageUser messageUser);

	@Override
	public int hashCode();

	@Override
	public CacheModel<MessageUser> toCacheModel();

	@Override
	public MessageUser toEscapedModel();

	@Override
	public MessageUser toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}